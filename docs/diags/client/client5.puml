@startuml
class Client
class CommandExecuter
class CommandManager {
    - bool& alive
    - Socket& socket
    - ScoreBoard& scoreboard
}
class CommandSender 
class Log {
    - {static} int playerId
    - {static} mutex& lock
    + {static} log(char* filename, char* function, int line, char* msg)
}
class Login {
    - Ui::Login* ui
    - string& ip, host, game_id
    + void on_button_create_clicked()
    + void on_button_join_clicked()
}
class Raycaster {
    + bool& alive
}
class ScoreBoard {
    - TextureManager& manager
    - mutex& scoreBoardLock
    - vector<tuple<int, int>> scores
    - vector<tuple<int, int>> highscores
    - vector<tuple<int, int>> kills
    + void pushScores(tuple<int, int>>)
    + void pushHightScores(tuple<int, int>>)
    + void pushKills(tuple<int, int>>)
    + void draw()
}
class Socket
class Thread {
    - {abstract} void run()
}
class TextureManager

CommandExecuter --|> CommandManager 
CommandSender --|> CommandManager
CommandManager -up-|> Thread
CommandManager -right-> Socket
CommandManager --> ScoreBoard
Client -left-> Raycaster
Client -right-> CommandManager
Client -up-> Log
Client -down-> Login
ScoreBoard -right-> TextureManager
@enduml